{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "A Demo Application",

  "Parameters" : {
    "KeyPairName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
    }
  },

  "Resources" : {

    "EC2Instance1" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyPairName" },
        "ImageId" : "ami-bff32ccc",
        "UserData" : {
          "Fn::Base64" : { "Fn::Join" : ["",
            [
               "#!/bin/bash -ex", "\n",
               "echo 'hello' > ffff", "\n",
               "yum -y install nodejs npm --enablerepo=epel", "\n",
               "yum -y install git", "\n",
               "git clone https://github.com/sharmp07/demo", "\n",
               "node demo/app1.js &", "\n"
            ]
          ]}
        }
      }
    },

    "EC2Instance2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyPairName" },
        "ImageId" : "ami-bff32ccc",
        "UserData" : {
          "Fn::Base64" : { "Fn::Join" : ["",
            [
               "#!/bin/bash -ex", "\n",
               "echo 'hello' > ffff", "\n",
               "yum -y install nodejs npm --enablerepo=epel", "\n",
               "yum -y install git", "\n",
               "git clone https://github.com/sharmp07/demo", "\n",
               "node demo/app2.js &", "\n"
            ]
          ]}
        }
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security groups",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "4567",
            "ToPort" : "4567",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },

    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security groups",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },

    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups" : { "Ref" : "LoadBalancerSecurityGroup" },
        "Instances" : [ { "Ref" : "Ec2Instance1" },{ "Ref" : "Ec2Instance2" } ],
        "Scheme" : "internet-facing",
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "4567",
            "Protocol": "TCP",
            "InstanceProtocol" : "TCP"
          }
        ]
      }
    }

  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "Instance Id",
      "Value" : { "Ref" : "EC2Instance" }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
    }
  }
}
